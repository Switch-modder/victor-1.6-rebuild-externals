# GNU Make project makefile autogenerated by Premake

ifndef config
  config=release
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),release)
  ifeq ($(origin CC), default)
    CC = arm-oe-linux-gnueabi-clang
  endif
  ifeq ($(origin CXX), default)
    CXX = arm-oe-linux-gnueabi-clang++
  endif
  ifeq ($(origin AR), default)
    AR = arm-oe-linux-gnueabi-ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/simple
  OBJDIR = obj/release/simple
  DEFINES += -DNDEBUG -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV -DOPTIMIZED_INTERPN_42_2
  INCLUDES += -I../../../project/se_lib_test_support -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_arm -I../../../thirdparty/sndfile/arm-clang-anki/include -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.a libmmfx.a -lm -lsndfile
  LDDEPS += libmmif.a libmmfx.a
  ALL_LDFLAGS += $(LDFLAGS) -L.. -L../../../thirdparty/sndfile/arm-clang-anki/lib -Wl,-rpath=.
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debugdll)
  ifeq ($(origin CC), default)
    CC = arm-oe-linux-gnueabi-clang
  endif
  ifeq ($(origin CXX), default)
    CXX = arm-oe-linux-gnueabi-clang++
  endif
  ifeq ($(origin AR), default)
    AR = arm-oe-linux-gnueabi-ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/simple
  OBJDIR = obj/debugdll/simple
  DEFINES += -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV -DOPTIMIZED_INTERPN_42_2
  INCLUDES += -I../../../project/se_lib_test_support -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_arm -I../../../thirdparty/sndfile/arm-clang-anki/include -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.so libmmfx.so -lm -lsndfile
  LDDEPS += libmmif.so libmmfx.so
  ALL_LDFLAGS += $(LDFLAGS) -L.. -L../../../thirdparty/sndfile/arm-clang-anki/lib -Wl,-rpath,'$$ORIGIN' -Wl,-rpath=.
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),releasedll)
  ifeq ($(origin CC), default)
    CC = arm-oe-linux-gnueabi-clang
  endif
  ifeq ($(origin CXX), default)
    CXX = arm-oe-linux-gnueabi-clang++
  endif
  ifeq ($(origin AR), default)
    AR = arm-oe-linux-gnueabi-ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/simple
  OBJDIR = obj/releasedll/simple
  DEFINES += -DNDEBUG -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV -DOPTIMIZED_INTERPN_42_2
  INCLUDES += -I../../../project/se_lib_test_support -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_arm -I../../../thirdparty/sndfile/arm-clang-anki/include -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.so libmmfx.so -lm -lsndfile
  LDDEPS += libmmif.so libmmfx.so
  ALL_LDFLAGS += $(LDFLAGS) -L.. -L../../../thirdparty/sndfile/arm-clang-anki/lib -Wl,-rpath,'$$ORIGIN' -Wl,-rpath=.
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug)
  ifeq ($(origin CC), default)
    CC = arm-oe-linux-gnueabi-clang
  endif
  ifeq ($(origin CXX), default)
    CXX = arm-oe-linux-gnueabi-clang++
  endif
  ifeq ($(origin AR), default)
    AR = arm-oe-linux-gnueabi-ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/simple
  OBJDIR = obj/debug/simple
  DEFINES += -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV -DOPTIMIZED_INTERPN_42_2
  INCLUDES += -I../../../project/se_lib_test_support -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_arm -I../../../thirdparty/sndfile/arm-clang-anki/include -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Werror -Wall -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -mfpu=neon -msoft-float -ffast-math -fPIC -march=armv7-a -mfloat-abi=softfp -mtune=cortex-a9 -Wno-unused-command-line-argument -no-integrated-as
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.a libmmfx.a -lm -lsndfile
  LDDEPS += libmmif.a libmmfx.a
  ALL_LDFLAGS += $(LDFLAGS) -L.. -L../../../thirdparty/sndfile/arm-clang-anki/lib -Wl,-rpath=.
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/block_reader.o \
	$(OBJDIR)/block_writer.o \
	$(OBJDIR)/cjson.o \
	$(OBJDIR)/process_json.o \
	$(OBJDIR)/simple.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking simple
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

clean:
	@echo Cleaning simple
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) -x c-header $(ALL_CFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/block_reader.o: ../../../project/se_lib_test_support/block_reader.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/block_writer.o: ../../../project/se_lib_test_support/block_writer.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/cjson.o: ../../../thirdparty/cJSON/cJSON.091209/cjson.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/process_json.o: ../../src/process_json.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/simple.o: ../simple.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif