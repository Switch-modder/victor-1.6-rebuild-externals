# GNU Make project makefile autogenerated by Premake

ifndef config
  config=release
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),release)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/wav
  OBJDIR = obj/release/wav
  DEFINES += -DNDEBUG -DSE_LIB_USES_IPP -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV
  INCLUDES += -I../../../thirdparty/intel_performance_primitives/mac/include -I.. -I../../../se_lib -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_x86 -I/usr/local/include -I/usr/local/include/libusb-1.0 -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209 -I../../../thirdparty/inih
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.a libmmfx.a -lipps_l -lippcore_l -lippch_l -largp -lsndfile
  LDDEPS += libmmif.a libmmfx.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../../thirdparty/intel_performance_primitives/mac/lib -L.. -L/usr/local/lib -undefined dynamic_lookup -rpath ./build -rpath ./
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debugdll)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/wav
  OBJDIR = obj/debugdll/wav
  DEFINES += -DSE_LIB_USES_IPP -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV
  INCLUDES += -I../../../thirdparty/intel_performance_primitives/mac/include -I.. -I../../../se_lib -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_x86 -I/usr/local/include -I/usr/local/include/libusb-1.0 -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209 -I../../../thirdparty/inih
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.dylib libmmfx.dylib -lipps_l -lippcore_l -lippch_l -largp -lsndfile
  LDDEPS += libmmif.dylib libmmfx.dylib
  ALL_LDFLAGS += $(LDFLAGS) -L../../../thirdparty/intel_performance_primitives/mac/lib -L.. -L/usr/local/lib -Wl,-rpath,'@loader_path/.' -undefined dynamic_lookup -rpath ./build -rpath ./
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),releasedll)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/wav
  OBJDIR = obj/releasedll/wav
  DEFINES += -DNDEBUG -DSE_LIB_USES_IPP -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV
  INCLUDES += -I../../../thirdparty/intel_performance_primitives/mac/include -I.. -I../../../se_lib -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_x86 -I/usr/local/include -I/usr/local/include/libusb-1.0 -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209 -I../../../thirdparty/inih
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O3 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.dylib libmmfx.dylib -lipps_l -lippcore_l -lippch_l -largp -lsndfile
  LDDEPS += libmmif.dylib libmmfx.dylib
  ALL_LDFLAGS += $(LDFLAGS) -L../../../thirdparty/intel_performance_primitives/mac/lib -L.. -L/usr/local/lib -Wl,-rpath,'@loader_path/.' -undefined dynamic_lookup -rpath ./build -rpath ./
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = .
  TARGET = $(TARGETDIR)/wav
  OBJDIR = obj/debug/wav
  DEFINES += -DSE_LIB_USES_IPP -DUSE_48K_ROUT_EQ -DSE_ASSERTION_SEGV
  INCLUDES += -I../../../thirdparty/intel_performance_primitives/mac/include -I.. -I../../../se_lib -I../../src -I../../../se_lib_public -I../../../project/anki_victor -I../../../se_lib_public/cpu_x86 -I/usr/local/include -I/usr/local/include/libusb-1.0 -I../../../thirdparty/CuTest/cutest-1.4 -I../../../thirdparty/cJSON/cJSON.091209 -I../../../thirdparty/inih
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O3 -g -Wall -Wextra -g -O0 -Wall -ftree-vectorize -msse2 -Werror=implicit-function-declaration -Wdeclaration-after-statement -Werror -fPIC
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += libmmif.a libmmfx.a -lipps_l -lippcore_l -lippch_l -largp -lsndfile
  LDDEPS += libmmif.a libmmfx.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../../thirdparty/intel_performance_primitives/mac/lib -L.. -L/usr/local/lib -undefined dynamic_lookup -rpath ./build -rpath ./
  LINKCMD = $(CC) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/cjson.o \
	$(OBJDIR)/process_json.o \
	$(OBJDIR)/audio-process-aec.o \
	$(OBJDIR)/docs.o \
	$(OBJDIR)/dumb_fir.o \
	$(OBJDIR)/main.o \
	$(OBJDIR)/options.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking wav
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

clean:
	@echo Cleaning wav
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) -x c-header $(ALL_CFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/cjson.o: ../../../thirdparty/cJSON/cJSON.091209/cjson.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/process_json.o: ../../src/process_json.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/audio-process-aec.o: ../audio-process-aec.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/docs.o: ../docs.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dumb_fir.o: ../dumb_fir.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/main.o: ../main.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/options.o: ../options.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif